{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","getUserById","userId","usersFromServer","find","App","useState","setTitle","validTitle","setValidTitle","setUserId","validUser","setValidUser","setFieldValue","event","target","value","Error","method","onSubmit","preventDefault","newTodo","Math","max","trim","push","type","placeholder","onChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"qNAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2B,uBCtDEC,EAA2B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjCF,EAAgBE,EAAhBF,MAAOF,EAASI,EAATJ,KAEf,OACE,mBAAGK,UAAU,WAAWC,KAAI,iBAAYJ,GAAxC,SACGF,KCFMO,EAA2B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEvCC,EACED,EADFC,MAAOL,EACLI,EADKJ,KAAMM,EACXF,EADWE,UAAWX,EACtBS,EADsBT,GAG1B,OAEE,cADA,CACA,WACE,UAASA,EACTM,UACEM,IACE,WACA,CAAE,sBAAuBD,IAL/B,UAUE,oBAAIL,UAAU,kBAAd,SACGI,IAEDL,EAAO,cAAC,EAAD,CAAUA,KAAMA,IAAW,SCtB7BQ,EAA2B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACzC,OACE,yBAASR,UAAU,WAAnB,SACGQ,EAAMC,KAAI,SAAAN,GAAI,OAAI,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKT,UCQzD,SAASgB,EAAYC,GAGnB,OAFiBC,EAAgBC,MAAK,SAAAd,GAAI,OAAIA,EAAKL,KAAOiB,MAEvC,KAarB,IAAMH,ECjCS,CACb,CACEd,GAAI,EACJU,MAAO,qBACPC,WAAW,EACXM,OAAQ,GAEV,CACEjB,GAAI,GACJU,MAAO,kBACPC,WAAW,EACXM,OAAQ,GAEV,CACEjB,GAAI,EACJU,MAAO,qCACPC,WAAW,EACXM,OAAQ,IDOqBF,KAAI,SAAAN,GAAI,kCAClCA,GADkC,IAErCJ,KAAMW,EAAYP,EAAKQ,aASdG,EAAM,WACjB,MAA0BC,mBAAS,IAAnC,mBAAOX,EAAP,KAAcY,EAAd,KACA,EAAoCD,oBAAS,GAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KACA,EAA4BH,mBAAS,GAArC,mBAAOJ,EAAP,KAAeQ,EAAf,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAkCMC,EAAgB,SAACC,GACrB,MAAwBA,EAAMC,OAAtB7B,EAAR,EAAQA,KAAM8B,EAAd,EAAcA,MAEd,OAAQ9B,GACN,IAAK,QACHqB,EAASS,GACTP,GAAc,GAEd,MAEF,IAAK,SACHC,GAAWM,GACXJ,GAAa,GAEb,MAEF,QACE,MAAM,IAAIK,MAAJ,yFAKZ,OACE,sBAAK1B,UAAU,MAAf,UACE,+CAEA,uBACE2B,OAAO,OACPC,SA5De,SAACL,GACpBA,EAAMM,iBACN,IAEMC,EAAU,CACdpC,GAHYqC,KAAKC,IAAL,MAAAD,KAAI,YAAQvB,EAAMC,KAAI,SAAAN,GAAI,OAAIA,EAAKT,QAGnC,EACZU,QACAC,WAAW,EACXM,SACAZ,KAAMW,EAAYC,IAGfA,GACHU,GAAa,GAGVjB,EAAM6B,QACTf,GAAc,GAGZP,GAAUP,EAAM6B,SAClBzB,EAAM0B,KAAKJ,GACXX,EAAU,GACVH,EAAS,IACTK,GAAa,GACbH,GAAc,KAiCd,UAIE,sBAAKlB,UAAU,QAAf,UACE,kCACG,UACD,uBACEmC,KAAK,OACLxC,KAAK,QACL,UAAQ,aACRyC,YAAY,gBACZX,MAAOrB,EACPiC,SAAUf,OAIbL,GAAc,sBAAMjB,UAAU,QAAhB,qCAIjB,sBAAKA,UAAU,QAAf,UACE,kCACG,SACD,yBACE,UAAQ,aACRyB,MAAOd,EACPhB,KAAK,SACL0C,SAAUf,EAJZ,UAME,wBAAQG,MAAM,IAAIa,UAAQ,EAA1B,2BAEC1B,EAAgBH,KAAI,YAAmB,IAAhBf,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAC1B,OACE,wBACE8B,MAAO/B,EADT,SAIGC,GAFID,YASd0B,GAAa,sBAAMpB,UAAU,QAAhB,qCAIhB,wBAAQmC,KAAK,SAAS,UAAQ,eAA9B,oBAKF,cAAC,EAAD,CAAU3B,MAAOA,QEtJvB+B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.bbf93571.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User\n};\nexport const UserInfo:React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todos } from '../../types/Todos';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todos\n};\n\nexport const TodoInfo:React.FC<Props> = ({ todo }) => {\n  const {\n    title, user, completed, id,\n  } = todo;\n\n  return (\n    // make classnames\n    <article\n      data-id={id}\n      className={\n        classNames(\n          'TodoInfo',\n          { 'TodoInfo--completed': completed },\n        )\n      }\n    >\n\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      { user ? <UserInfo user={user} /> : null}\n    </article>\n  );\n};\n","import { Todos } from '../../types/Todos';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todos[]\n};\nexport const TodoList:React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => <TodoInfo todo={todo} key={todo.id} />)}\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todos } from './types/Todos';\nimport { TodoList } from './components/TodoList';\n\ntype TodosFromServer = {\n  id: number,\n  title: string,\n  completed: boolean,\n  userId: number,\n};\n\nfunction getUserById(userId:number):User | null {\n  const findUser = usersFromServer.find(user => user.id === userId);\n\n  return findUser || null;\n}\n\nfunction setUsersInTodos(serverTodos:TodosFromServer[]): Todos[] {\n  const readyTodos = serverTodos.map(todo => ({\n    ...todo,\n    user: getUserById(todo.userId),\n  }\n  ));\n\n  return readyTodos;\n}\n\nconst todos = setUsersInTodos(todosFromServer);\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [validTitle, setValidTitle] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [validUser, setValidUser] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const maxId = Math.max(...todos.map(todo => todo.id));\n\n    const newTodo = {\n      id: maxId + 1,\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    };\n\n    if (!userId) {\n      setValidUser(true);\n    }\n\n    if (!title.trim()) {\n      setValidTitle(true);\n    }\n\n    if (userId && title.trim()) {\n      todos.push(newTodo);\n      setUserId(0);\n      setTitle('');\n      setValidUser(false);\n      setValidTitle(false);\n    }\n  };\n\n  type Props =\n    React.ChangeEvent<HTMLSelectElement> | React.ChangeEvent<HTMLInputElement>;\n\n  const setFieldValue = (event: Props) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'title':\n        setTitle(value);\n        setValidTitle(false);\n\n        break;\n\n      case 'userId':\n        setUserId(+value);\n        setValidUser(false);\n\n        break;\n\n      default:\n        throw new Error(`The title cannot start with a space.\n        Enter a valid title and select a user`);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              name=\"title\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={setFieldValue}\n            />\n          </label>\n\n          {validTitle && <span className=\"error\">Please enter a title</span>}\n\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={userId}\n              name=\"userId\"\n              onChange={setFieldValue}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n\n              {usersFromServer.map(({ id, name }) => {\n                return (\n                  <option\n                    value={id}\n                    key={id}\n                  >\n                    {name}\n                  </option>\n                );\n              })}\n            </select>\n          </label>\n\n          {validUser && <span className=\"error\">Please choose a user</span>}\n\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}